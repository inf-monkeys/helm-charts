fullnameOverride:

images:
  server:
    repository: infmonkeys/monkeys
    tag: 0.0.9
    pullPolicy: IfNotPresent
    pullSecrets: 
  
  web:
    repository: infmonkeys/monkeys-ui
    tag: 1.0.5
    pullPolicy: IfNotPresent
    pullSecrets: 

  conductor:
    repository: infmonkeys/conductor
    tag: 1.0.0
    pullPolicy: IfNotPresent
    pullSecrets: 

proxy:
  enabled: true

  image:
    repository: nginx
    tag: latest
    pullPolicy: IfNotPresent

  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  extraEnv:
  # Apply your own Environment Variables if necessary
  # - name: LANG
  #   value: "C.UTF-8"
  log:
    persistence:
      ## If true, create/use a Persistent Volume Claim for log
      ## If false, flush logs to stdout & stderr
      ##
      enabled: false
      mountPath: "/var/log/nginx"
      annotations:
        helm.sh/resource-policy: keep
      persistentVolumeClaim:
        existingClaim: ""
        ## Nginx Logs Persistent Volume Storage Class
        ## If defined, storageClassName: <storageClass>
        ## If set to "-", storageClassName: "", which disables dynamic provisioning
        ## If undefined (the default) or set to null, no storageClassName spec is
        ##   set, choosing the default provisioner.
        ## ReadWriteMany access mode required for nginx
        ##
        storageClass:
        accessModes: ReadWriteMany
        size: 1Gi
        subPath: ""
  service:
    port: 80
    annotations: {}
    labels: {}
    clusterIP: ""

server:
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []

  service:
    port: 3000
    annotations: {}
    labels: {}
    clusterIP: ""

  server:
    # Defaults to monkeys, will use as table name prefix and etc, you can change to your own.
    appId: monkeys
    # Change this to public visible url
    appUrl: http://localhost:3000

  auth:
    enabled:
      - phone
      - password
      - apikey

web:
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []

  service:
    port: 3000
    annotations: {}
    labels: {}
    clusterIP: ""

conductor:
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []

  service:
    port: 8080
    annotations: {}
    labels: {}
    clusterIP: ""

###################################
# BuiltIn postgres
# - these configs are only used when `postgresql.enabled` is true
###################################
postgresql:
  # If not enabled, will use sqlite as fallback.
  enabled: true
  global:
    postgresql:
      auth:
        postgresPassword: "monkeys123"
        username: "monkeys"
        password: "monkeys123"
        database: "monkeys"

###################################
# External postgres
# - these configs are only used when `externalPostgresql.enabled` is true
###################################
externalPostgresql:
  enabled: false
  host: 127.0.0.1
  port: 5432
  username: monkeys
  password: monkeys123
  database: monkeys

###################################
# BuiltIn elasticsearch
# - these configs are only used when `elasticsearch.enabled` is true
# See more at https://github.com/elastic/helm-charts/tree/main/elasticsearch#configuration
###################################
elasticsearch:
  enabled: true
  replicas: 1
  image: docker.elastic.co/elasticsearch/elasticsearch
  imageTag: 7.17.3
  minimumMasterNodes: 1
  esMajorVersion: 7
  secret:
    password: monkeys123

  indexReplicasCount: 0
  clusterHealthColor: yellow

###################################
# External postgres
# - these configs are only used when `externalPostgresql.enabled` is true
###################################
externalElasticsearch:
  enabled: false
  indexReplicasCount: 0
  clusterHealthColor: yellow
  url: http://localhost:9200
  username: elastic
  password: monkeys123

redis:
  enabled: true
  architecture: standalone
  global:
    redis:
      password: monkeys123
  # Whether to let helm create redis for you, or you can provide your existing database inside options

externalRedis:
  enabled: false
  url: redis://localhost:6379/0

minio:
  enabled: true
  mode: standalone
  defaultBuckets: monkeys-static,monkeys-models
  auth:
    rootUser: minio
    rootPassword: monkeys123

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: nginx
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # nginx.ingress.kubernetes.io/backend-protocol: HTTP
    # nginx.ingress.kubernetes.io/proxy-body-size: 15m
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: monkeys-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - dify-example.local

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10

